=> Difference between Plain-JDBC and Spring-JDBC (Spring Boot with JDBC) :-
	1. = In Plain-JDBC, we have to get the connection object manually
	   = In Spring-JDBC, connection object is automatically provided by JdbcTemplate class
	   
	2. = In Plain-JDBC we have to follow some steps :-
			i. Load and register the driver
				-> Class.forName("driver-class-name");
			ii. Establish the connection
				-> Connection con = DriverManager.getConnection("url", "username", "password");
			iii. Create Statement / PreparedStatement / CallableStatement object
				-> Statement st = con.createStatement();
				-> PreparedStatement ps = con.prepareStatement();
				-> CallableStatement cs = con.prepareCall();
			iv. Send and execute SQL query
				-> int count = ps.executeUpdate();				// used for insert, update and delete
				-> ResultSet rs = ps.executeQuery();			// used for select
			v. Process the result
			vi. Close all the resources
				-> ps.close();
				-> con.close();
			>> In above steps, i, ii, iii, vi steps are always same but iv and v steps are variable. So the common steps or same steps are known as boilerplate code which we have to write again and again
	   = In Spring-JDBC, we dont need to provide boilerplate code
	   
	3. = In Plain-JDBC we have to handle the compile time exceptions using try-catch block or throws keyword
	   = In Spring-JDBC we dont need to handle the exceptions because it converts the compile time exceptions into runtime exceptions
	   
	4. = In Plain-JDBC, select query will retrieve and store the records/data in ResultSet
	   = In Spring-JDBC, select query can retrieve and store the records/data in the form of Collections i.e. List, Map or Bean Objects
	   
	5. = In Plain-JDBC, as the records/data is stored in ResultSet which is non-synchronized and thus it cannot be transfered over the network
	   = In Spring-JDBC, as records/data is stored in Collections or bean objects which are synchronized and thus it can be transfered over the network
	   
	6. = In Plain-JDBC, if we want to store the records/data in bean object or Collections object, then we have to write the code manually
	   = In Spring-JDBC, records/data is directly stored in the bean object or Collections object, because JdbcTemplate provides pre-defined methods for this
	   
	7. = Plain-JDBC provides less support for transaction management
	   = Spring-JDBC provides more support for transaction management
	   
======================================================================================================================